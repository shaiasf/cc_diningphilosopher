<TestLog> Running test 'TestCaseNoSwap'.
<CreateLog> PImplementation.ForkUsageSpec was created.
<MonitorLog> PImplementation.ForkUsageSpec enters state 'Monitoring'.
<CreateLog> TestWithNoSwap(1) was created by task '2'.
<StateLog> TestWithNoSwap(1) enters state 'Init'.
<CreateLog> Fork(2) was created by TestWithNoSwap(1).
<CreateLog> Fork(3) was created by TestWithNoSwap(1).
<StateLog> Fork(3) enters state 'Init'.
<StateLog> Fork(2) enters state 'Init'.
<CreateLog> Fork(4) was created by TestWithNoSwap(1).
<StateLog> Fork(4) enters state 'Init'.
<CreateLog> Fork(5) was created by TestWithNoSwap(1).
<StateLog> Fork(5) enters state 'Init'.
<CreateLog> Fork(6) was created by TestWithNoSwap(1).
<StateLog> Fork(6) enters state 'Init'.
<CreateLog> Philosopher(7) was created by TestWithNoSwap(1).
<StateLog> Philosopher(7) enters state 'Init'.
<CreateLog> Philosopher(8) was created by TestWithNoSwap(1).
<StateLog> Philosopher(8) enters state 'Init'.
<CreateLog> Philosopher(9) was created by TestWithNoSwap(1).
<CreateLog> Philosopher(10) was created by TestWithNoSwap(1).
<StateLog> Philosopher(10) enters state 'Init'.
<StateLog> Philosopher(9) enters state 'Init'.
<CreateLog> Philosopher(11) was created by TestWithNoSwap(1).
<SendLog> 'TestWithNoSwap(1)' in state 'Init' sent event 'eStart' to 'Philosopher(7)'.
<DequeueLog> 'Philosopher(7)' dequeued event 'eStart' in state 'Init'.
<GotoLog> Philosopher(7) is transitioning from state 'Init' to state 'PImplementation.Philosopher.Hungry'.
<StateLog> Philosopher(7) exits state 'Init'.
<StateLog> Philosopher(7) enters state 'Hungry'.
<SendLog> 'Philosopher(7)' in state 'Hungry' sent event 'ePickUp with payload (Philosopher(7))' to 'Fork(2)'.
<SendLog> 'TestWithNoSwap(1)' in state 'Init' sent event 'eStart' to 'Philosopher(8)'.
<StateLog> Philosopher(11) enters state 'Init'.
<DequeueLog> 'Philosopher(8)' dequeued event 'eStart' in state 'Init'.
<GotoLog> Philosopher(8) is transitioning from state 'Init' to state 'PImplementation.Philosopher.Hungry'.
<StateLog> Philosopher(8) exits state 'Init'.
<StateLog> Philosopher(8) enters state 'Hungry'.
<SendLog> 'Philosopher(8)' in state 'Hungry' sent event 'ePickUp with payload (Philosopher(8))' to 'Fork(3)'.
<DequeueLog> 'Fork(2)' dequeued event 'ePickUp with payload (Philosopher(7))' in state 'Init'.
<SendLog> 'TestWithNoSwap(1)' in state 'Init' sent event 'eStart' to 'Philosopher(9)'.
<DequeueLog> 'Philosopher(9)' dequeued event 'eStart' in state 'Init'.
<GotoLog> Philosopher(9) is transitioning from state 'Init' to state 'PImplementation.Philosopher.Hungry'.
<StateLog> Philosopher(9) exits state 'Init'.
<StateLog> Philosopher(9) enters state 'Hungry'.
<SendLog> 'TestWithNoSwap(1)' in state 'Init' sent event 'eStart' to 'Philosopher(10)'.
<DequeueLog> 'Philosopher(10)' dequeued event 'eStart' in state 'Init'.
<GotoLog> Philosopher(10) is transitioning from state 'Init' to state 'PImplementation.Philosopher.Hungry'.
<StateLog> Philosopher(10) exits state 'Init'.
<StateLog> Philosopher(10) enters state 'Hungry'.
<SendLog> 'Fork(2)' in state 'Init' sent event 'eTaken with payload (Fork(2))' to 'Philosopher(7)'.
<AnnounceLog> 'Fork(2)' announced event 'ForkGranted' with payload <philosopher:Philosopher(7), fork:Fork(2), >.
<MonitorLog> ForkUsageSpec is processing event 'ForkGranted with payload (<philosopher:Philosopher(7), fork:Fork(2), >)' in state 'Monitoring'.
<DequeueLog> 'Philosopher(7)' dequeued event 'eTaken with payload (Fork(2))' in state 'Hungry'.
<SendLog> 'Philosopher(9)' in state 'Hungry' sent event 'ePickUp with payload (Philosopher(9))' to 'Fork(4)'.
<SendLog> 'Philosopher(7)' in state 'Hungry' sent event 'ePickUp with payload (Philosopher(7))' to 'Fork(3)'.
<SendLog> 'Philosopher(10)' in state 'Hungry' sent event 'ePickUp with payload (Philosopher(10))' to 'Fork(5)'.
<DequeueLog> 'Fork(5)' dequeued event 'ePickUp with payload (Philosopher(10))' in state 'Init'.
<SendLog> 'TestWithNoSwap(1)' in state 'Init' sent event 'eStart' to 'Philosopher(11)'.
<DequeueLog> 'Fork(4)' dequeued event 'ePickUp with payload (Philosopher(9))' in state 'Init'.
<DequeueLog> 'Philosopher(11)' dequeued event 'eStart' in state 'Init'.
<GotoLog> Philosopher(11) is transitioning from state 'Init' to state 'PImplementation.Philosopher.Hungry'.
<StateLog> Philosopher(11) exits state 'Init'.
<StateLog> Philosopher(11) enters state 'Hungry'.
<SendLog> 'Philosopher(11)' in state 'Hungry' sent event 'ePickUp with payload (Philosopher(11))' to 'Fork(6)'.
<DequeueLog> 'Fork(6)' dequeued event 'ePickUp with payload (Philosopher(11))' in state 'Init'.
<SendLog> 'Fork(5)' in state 'Init' sent event 'eTaken with payload (Fork(5))' to 'Philosopher(10)'.
<AnnounceLog> 'Fork(5)' announced event 'ForkGranted' with payload <philosopher:Philosopher(10), fork:Fork(5), >.
<MonitorLog> ForkUsageSpec is processing event 'ForkGranted with payload (<philosopher:Philosopher(10), fork:Fork(5), >)' in state 'Monitoring'.
<SendLog> 'Fork(4)' in state 'Init' sent event 'eTaken with payload (Fork(4))' to 'Philosopher(9)'.
<AnnounceLog> 'Fork(4)' announced event 'ForkGranted' with payload <philosopher:Philosopher(9), fork:Fork(4), >.
<MonitorLog> ForkUsageSpec is processing event 'ForkGranted with payload (<philosopher:Philosopher(9), fork:Fork(4), >)' in state 'Monitoring'.
<DequeueLog> 'Fork(3)' dequeued event 'ePickUp with payload (Philosopher(8))' in state 'Init'.
<SendLog> 'Fork(6)' in state 'Init' sent event 'eTaken with payload (Fork(6))' to 'Philosopher(11)'.
<AnnounceLog> 'Fork(6)' announced event 'ForkGranted' with payload <philosopher:Philosopher(11), fork:Fork(6), >.
<MonitorLog> ForkUsageSpec is processing event 'ForkGranted with payload (<philosopher:Philosopher(11), fork:Fork(6), >)' in state 'Monitoring'.
<DequeueLog> 'Philosopher(9)' dequeued event 'eTaken with payload (Fork(4))' in state 'Hungry'.
<SendLog> 'Fork(3)' in state 'Init' sent event 'eTaken with payload (Fork(3))' to 'Philosopher(8)'.
<AnnounceLog> 'Fork(3)' announced event 'ForkGranted' with payload <philosopher:Philosopher(8), fork:Fork(3), >.
<MonitorLog> ForkUsageSpec is processing event 'ForkGranted with payload (<philosopher:Philosopher(8), fork:Fork(3), >)' in state 'Monitoring'.
<ErrorLog> Assertion Failed: NoDeadLock.p:17:7
<StrategyLog> Found bug using 'random' strategy.
<StrategyLog> Checking statistics:
<StrategyLog> Found 1 bug.
<StrategyLog> Scheduling statistics:
<StrategyLog> Explored 1 schedule
<StrategyLog> Explored 1 timeline
<StrategyLog> Found 100.00% buggy schedules.
<StrategyLog> Number of scheduling points in terminating schedules: 50 (min), 50 (avg), 50 (max).